demo90
demo()
quit90
qui()
quit()
demo()
find.package("devtools")
find.package("XML")
install.packages("KernSmooth")
library(KernSmooth)
find.package("devtools")
install.packages("devtools")
library(devtools)
install.packages("memoise")
install.packages("whisker")
install.packages("evaluate")
install.packages("evaluate")
library(devtools)
find_rtools()
help("gl")
library(datasets)
data(iris)
?iris
class(iris)
names(iris)
iris$names
colnames(iris)
?split
l<-split(iris,colnames(iris))
sapply(l,mean)
head(iris)
rm(l)
l<-split(iris,iris$Species)
?colmeans
?colMeans
help("colmeans")
help("colMeans")
colMeans(l[1])
l[1]
library(plyr)
data(airQuality)
data(airquality)
names(airquality)
View(airquality)
arrange(airquality,ozone)
arrange(airquality,airquality$Ozone)
airquality[airquality$Month==5 & airquality$day>20,]
arrange(airquality,airquality$Month)
airquality[airquality$Month==5 & airquality$Day>20,]
getwd()
data(iris)
?hist
names(iris)
head(iris[,1])
hist(iris[,1])
getwd()
brick<-function(x){
retVal<-0;
if (X>0 & X<1){
retval<-1
}
retval
}
a<-rnorm(10)
brick(a)
?is.numeric
### Statistical inference course
brick<-function(x){
len<-length(x)
retVal<-rep(0,len);
for (i in 1:len){
if (X[i]>0 & X[i]<1){
retval[i]<-1
}
}
retval
}
brick(a)
### Statistical inference course
brick<-function(num){
len<-length(num)
retVal<-rep(0,len);
for (i in 1:len){
if (num[i]>0 & num[i]<1){
retval[i]<-1
}
}
retval
}
a
brick(a)
### Statistical inference course
brick<-function(num){
len<-length(num)
retVal<-rep(0,len)
for (i in 1:len){
if (num[i]>0 & num[i]<1){
retval[i]<-1
}
}
retval
}
brick(a)
length(a)
retVal<-rep(0,10)
retVal
retVal[3]
?len
### Statistical inference course
brick<-function(num){
len<-length(num)
retval<-rep(0,len)
for (i in 1:len){
if (num[i]>0 & num[i]<1){
retval[i]<-1
}
}
retval
}
a<-rnorm(100)
plot(a,brick(a))
### Statistical inference course
brick<-function(num){
len<-length(num)
retval<-rep(0,len)
for (i in 1:len){
if (num[i]>=0 & num[i]<1){
retval[i]<-1
}
}
retval
}
brick(0.2)
brick(1)
brick(0)
### Statistical inference course
brick<-function(num){
len<-length(num)
retval<-rep(0,len)
for (i in 1:len){
if (num[i]>0 & num[i]<1){
retval[i]<-1
}
}
retval
}
brick(3)
a
plot(a,brick(a),type="n")
lines(a,brick(a),col="red")
plot(a,brick(a),type="n")
points(brick(a))
points(a,brick(a))
lines(a,brick(a))
plot(a,brick(a),type="n")
lines(a,brick(a))
b<-sort(a)
plot(a,brick(a),type="n")
plot(b,brick(b),type="n")
lines(b,brick(b))
### Statistical inference course
brick<-function(num){
len<-length(num)
retval<-rep(0,len)
for (i in 1:len){
if (num[i]>=0 & num[i]<=1){
retval[i]<-1
}
}
retval
}
plot(b,brick(b),type="n")
lines(b,brick(b))
c<-b*brick(b)
plot(b,c,type="n")
lines(b,c)
### Statistical inference course
# defining a toy probability density function
brick<-function(num){
len<-length(num)
retval<-rep(0,len)
for (i in 1:len){
if (num[i]>0 & num[i]<1){
retval[i]<-1
}
}
retval
}
a<-rnorm(100)
# assume a is the observation / sample of Random continous qty called A
a<-c(a,0,1)
a<-sort(a) # order the values
plot(a,brick(a),type="n")
lines(a,brick(a))
toypdf<-function(x){
retval<-0
if(x>0 & x<1){
retval<-2*x
}
retval
}
toypdf(3)
toypdf(0.5)
toypdf(0)
toypdf(0.1)
xval<-order(rnorm(100))
fofx<-toypdf(xval)
plot(xval,fofx,type="n")
lines(xval,fofx)
# defining a toy  function to demo PDF for random Continous variables
toypdf<-function(x){
l<- length(x)
retval<-rep(0,l)
for (i in 1:l){
if(x[i]>0 & x[i]<1){
retval<-2*x[i]
}
}
retval
}
xval<-order(rnorm(100))
fofx<-toypdf(xval)
plot(xval,fofx,type="n")
lines(xval,fofx)
################### Statistical inference Week #1 ###################
# defining a toy  function to demo PDF for random Continous variables
toypdf<-function(x){
l<- length(x)
retval<-rep(0,l)
for (i in 1:l){
if(x[i]>0 & x[i]<1){
retval<-2*x[i]
}
}
retval
}
xval<-sort(rnorm(100))
fofx<-toypdf(xval)
plot(xval,fofx,type="n")
lines(xval,fofx)
################### Statistical inference Week #1 ###################
# defining a toy  function to demo PDF for random Continous variables
toypdf<-function(xvar){
l<- length(xvar)
retval<-rep(0,l)
for (i in 1:l){
if(xvar[i]>0 & xvar[i]<1){
retval[i]<-2*xvar[i]
}
}
retval
}
x<-rnorm(100)
fx<-toypdf(x)
plot(x,fx,type="n")
lines(x,fx)
################### Statistical inference Week #1 ###################
# defining a toy  function to demo PDF for random Continous variables
toypdf<-function(xvar){
l<- length(xvar)
retval<-rep(0,l)
for (i in 1:l){
if(xvar[i]>0 & xvar[i]<1){
retval[i]<-2*xvar[i]
}
}
retval
}
x<-rnorm(100)
x<-sort(x)
fx<-toypdf(x)
plot(x,fx,type="n")
lines(x,fx)
.5*.75*1.5
?beta
?pbeta
a<-1:6
a
b = rep(1/6,6)
b
plot(a,b)
barplot(a,b)
barplot(b,a)
# defining a toy probability density function
brick<-function(num){
len<-length(num)
retval<-rep(0,len)
for (i in 1:len){
if (num[i]>0 & num[i]<1){
retval[i]<-1
}
}
retval
}
a<-rnorm(100)
# assume a is the observation / sample of Random continous qty called A
a<-c(a,0,1)
a<-sort(a) # order the values
plot(a,brick(a),type="n")
lines(a,brick(a))
b<-a*brick(a) # simulates t*f(t)
plot(a,b,type="n")
lines(a,b)
data(iris)
names(iris)
plot(iris$Petal.Length,iris$Petal.Width)
setwd("C:/Users/koushikk/repos/Datascience/exploratorydataanalysis")
library("lattice")
data(airquality)
names(airquality)
xyplot(Ozone~Wind,data=airquality)
testdf<-transform(testdf,Month=factor(Month))
testdf<-airquality
testdf<-transform(testdf,Month=factor(Month))
xyplot(Ozone~Wind|Month,data=airquality,layout=c(1,5))
xyplot(Ozone~Wind|Month,data=airquality,layout=c(5,1))
xyplot(Ozone~Wind|Month,data=testdf,layout=c(5,1))
library(ggplot2)
qplot(Wind,Ozone,data=testdf)
qplot(Wind,Ozone,data=testdf,facets=.~Month)
qplot(Wind,Ozone,data=testdf,facets=.~Month, geom=c("points","smooth"))
qplot(Wind,Ozone,data=testdf,facets=.~Month, geom=c("point","smooth"))
qplot(Wind,Ozone,data=testdf,facets=.~Month, geom=c("point","smooth"), method="lm")
names(airqualit)
names(airquality)
data(iris)
names(iris)
qplot(Sepal.Length,Sepal.Width, data=iris,col=Species)
qplot(Sepal.Length,Sepal.Width, data=iris,col=Species, geom=c("point","smooth"))
qplot(Sepal.Length,data=iris,color=Species)
qplot(Sepal.Length,data=iris,facets=.~Species)
qplot(Sepal.Length,data=iris,fill=Species)
qplot(Sepal.Length,data=iris,geom="density")
qplot(Sepal.Length,data=iris,geom="density", col=Species)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
?trellis.par.set
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(votes, rating, data = movies, smooth = "loess")
?llines
qplot(votes, rating, data = movies) + geom_smooth()
?stats_smooth
library(ggplot2)
?stats_smooth
?qploy
?qplit
?qplot
?stat_smooth
